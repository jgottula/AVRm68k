Priorities:
- Replace SIMM
  - Rewrite read & write with correct timings and other things
  - Implement cas-before-ras refresh
  - See about FPM
  - Implement read-modify-write (for incrementing memory locations, etc)
- Emulator: memory system
- Emulator: addressing modes
- Emulator: instructions
  - Next: clr, cmp, eor, or, and
- SD
- Linux from scratch
- Bootloader
- HDD driver
- RTC chip for date/time

Tests:
- m68k_mem: read and write, for all sizes
- ALL address modes

Optimizations:
- Set DRAM delays based on spec (if any such spec exists)
- Reduce the overhead between SPI begin/end sessions
- Use fast page mode to read WORD or LONG values
- Put nonatomic_block around _delay's in dramRead/Write
- Test AVR overclocks (6V is absolute max voltage; try ~5.5V overvolt somehow?)
- Remove debug code

Program size:
- Use decompressor stub + compressed code?

Overclocking:
- Get power as 12V (or 7.4V) and use another LM317 to get >5V
  - Or, use boost converter (more expensive/difficult)
  - This needs to be VERY precise
- Check that all TTL components (i.e. those not buffered with 4050) can
  withstand the overvolt
  - ATmega324A: abs max 6V, 5.5V reasonable
  - OWC DRAM: abs max 7V, 5.5V reasonable
  - MAX232: abs max 6V, 5.5V reasonable
  - FT232R: don't want to touch this
- Check that 3.3V outputs from SPI devices will actually register above the Vih
  threshold of the AVR (5.5-6V WILL be a problem)
  - Check if 4050 with Vcc 5V will actually pull 3.3V up to 5V
    - Alt: use bipolar discretes?
- Will need to buffer the UART tx line to 5V using 4050 (if using FTDI chip)
- It may be possible to use the ADC to track Vcc
