Priorities:
- Implement dram read-modify-write (for incrementing memory locations, etc)
- Emulator: MMU!
- Emulator: memory system
  - Add function for long reads/writes
  - Implement read/modify/write cycle
    - Probably implement int8_t addition for the modify step
    - Will need FPM + RMW for word/long incr/decr
- Emulator: instructions
- Emulator: emu instructions
  - dumpstack
- SD card
  - Because of no card detect, throw fatal error upon early init problems
- Linux from scratch
- Bootloader
- HDD driver
- RTC chip for date/time
- Interactive debugging mode (for fixing emulator bugs)
- Colored output (use 033, followed by "[<attr>;<attr>;<attr...>m")
- Replace assert(0)'s with actual errors
  - Use illegal instruction traps for unimplemented instruction opcodes

Bugs:
- Handling of stack pointers is wrong: if in user mode, %sp means %a7; however,
  if we are in supervisor mode, %a7 is actually either %isp or %msp (see section
  1.3.1 of M68000PRM.pdf)

Tests:
- Address modes:
  - Immediate modes look broken!
  - Addr reg indirect index
  - Addr reg indirect index base displacement
  - Memory indirect postindex
  - Memory indirect preindex
  - PC indirect index
  - PC indirect index base displacement
  - PC memory indirect postindex
  - PC memory indirect preindex
- Instructions:
  - pea (check stack)
  - jmp, jsr, bra, bsr (check stack)
  - all 16 conditional codes
  - tst (cond codes)
  - addq (all cond codes)
  - and/exg instr bits
  - or/sbcd instr bits
  - eor/or interaction

Optimizations:
- Remember to BENCHMARK/PROFILE all optimizations for determining efficacy
- Implement icache and/or dcache (internal ram and/or sram)
- Use fast page mode to read WORD or LONG values from dram
- Implement DMA using second microcontroller such as ATtiny13 (for cache
  writeback to DRAM, or SD writes, or for buffered asynchronous serial, etc)
- Reorder if/else statements so more likely instructions etc are first
- Remove debug code
