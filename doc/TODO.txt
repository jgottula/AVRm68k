Priorities:
- Implement dram read-modify-write (for incrementing memory locations, etc)
- Emulator: MMU!
- Emulator: memory system
  - Add function for long reads/writes
  - Implement read/modify/write cycle
    - Probably implement int8_t addition for the modify step
    - Will need FPM + RMW for word/long incr/decr
- Emulator: instructions
- Emulator: emu instructions
  - dumpstack
- SD card
  - Because of no card detect, throw fatal error upon early init problems
- Linux from scratch
- Bootloader
- HDD driver
- RTC chip for date/time
- Interactive debugging mode (for fixing emulator bugs)
- Colored output (use 033, followed by "[<attr>;<attr>;<attr...>m")
- Replace assert(0)'s with actual errors
  - Use illegal instruction traps for unimplemented instruction opcodes
- Write a bootloader that can do serial self-programming at around 1.25 Mbaud
  - Enable chain-programming: program the dma mcu from the main mcu
- Put the FF clk on PORTA to save two cycles
  - Instead of loading the new address, setting clk, and then clearing clk,
    clear clk as the address is loaded, and then set it as a second step
  - Order matters: don't give the flip-flop a positive edge as its inputs change
- Stack trace on assertion failures (use map file to manually symbolify)
- Implement RTS/CTS for the UART so the FT232R doesn't overflow its buffer

Bugs:
- Handling of stack pointers is wrong: if in user mode, %sp means %a7; however,
  if we are in supervisor mode, %a7 is actually either %isp or %msp (see section
  1.3.1 of M68000PRM.pdf)
- ALL instances of exceptions (illegal instr, hw reset, etc.) need to be handled
  precisely as documented: no more messy emulation
- EA modes need to be a bit more restrictive
  - They likely need to be checked in general anyway

Tests:
- Address modes:
  - Immediate modes look broken!
  - Addr reg indirect index
  - Addr reg indirect index base displacement
  - Memory indirect postindex
  - Memory indirect preindex
  - PC indirect index
  - PC indirect index base displacement
  - PC memory indirect postindex
  - PC memory indirect preindex
- Instructions:
  - pea (check stack)
  - jmp, jsr, bra, bsr (check stack)
  - all 16 conditional codes
  - tst (cond codes)
  - addq (all cond codes)
  - and/exg instr bits
  - or/sbcd instr bits
  - eor/or interaction

Optimizations:
- Remember to BENCHMARK/PROFILE all optimizations for determining efficacy
- Implement icache and/or dcache (internal ram and/or sram)
- Use fast page mode to read WORD or LONG values from dram
- Implement DMA using second microcontroller such as ATtiny13 (for cache
  writeback to DRAM, or SD writes, or for buffered asynchronous serial, etc)
- Reorder if/else statements so more likely instructions etc are first
- Remove debug code
