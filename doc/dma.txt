DMA/DRAM Controller MCU

- Hardware candidates:
  - ATmega324A DIP (has enough IO ports)
- Advantages:
  - Frees up main MCU IO ports (no more shift registers)
  - Frees the main MCU of dealing with DRAM refresh (no more ~1ms interruptions)
  - Can independently handle caching, if appropriate
    - Actually, this is probably a terrible idea: difficult to tell if data or
      instruction access (could be done with addl IO line), and won't have
      nearly the SRAM capacity of the main MCU
  - Can potentially do DRAM control *and* handle DMA at the same time
  - More likely to be able to interrupt DRAM refresh for an access, or to use
    the more advanced refresh methods
- Disadvantages:
  - May be slower than direct access (especially if using SPI)
  - Benefits may not justify added complexity
  - More chips
- Implementation details:
  - Use the CLKIN pin to save a crystal and sync with main MCU
  - Use hardware sleep modes when idle
  - Probably use external interrupt or pin change interrupt to detect requests
  - SPI approach:
    - Really, really slow: 10 Mbit/s (incl. 24-bit address and other bits)
    - Exceptionally light on IO pins
  - Parallel approach:
    - Still need 8-10 IO pins on the main MCU
    - Pretty fast, probably near-direct speed if done right
    - Can we make the interface synchronous (i.e., lockstep with MCU clocks)?
    - Possible request structure:
      - | 8-bit code | 24-bit address | -> DMA
      - Code bits:
        - |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |
        - |  access size  |  r/w  |  a_25 |  other operations (DMA etc.)  |
